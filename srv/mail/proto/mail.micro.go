// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/mail.proto

/*
Package educonn_mail is a generated protocol buffer package.

It is generated from these files:
	proto/mail.proto

It has these top-level messages:
	EmailRequest
	Response
*/
package educonn_mail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for EmailService service

type EmailServiceClient interface {
	SendEmail(ctx context.Context, in *EmailRequest, opts ...client.CallOption) (*Response, error)
}

type emailServiceClient struct {
	c           client.Client
	serviceName string
}

func NewEmailServiceClient(serviceName string, c client.Client) EmailServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "educonn.mail"
	}
	return &emailServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *emailServiceClient) SendEmail(ctx context.Context, in *EmailRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "EmailService.SendEmail", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmailService service

type EmailServiceHandler interface {
	SendEmail(context.Context, *EmailRequest, *Response) error
}

func RegisterEmailServiceHandler(s server.Server, hdlr EmailServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&EmailService{hdlr}, opts...))
}

type EmailService struct {
	EmailServiceHandler
}

func (h *EmailService) SendEmail(ctx context.Context, in *EmailRequest, out *Response) error {
	return h.EmailServiceHandler.SendEmail(ctx, in, out)
}
